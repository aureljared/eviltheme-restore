#!/sbin/sh
# Eviltheme by Jared Dantis (@aureljared)
# Licensed under GPL v3
# https://github.com/aureljared/eviltheme
ZIPFILE="$3"

# Initialize
unzip -o "$ZIPFILE" 'delete.list' 'bytecode.list' 'eviltheme.prop' 'pre-uninstall.sh' 'post-uninstall.sh' -d "/tmp"
unzip -o "$ZIPFILE" 'META-INF/tk/aureljared/restore-utils.sh' -d "/tmp"
chmod 755 "/tmp/META-INF/tk/aureljared/restore-utils.sh"
. "/tmp/META-INF/tk/aureljared/restore-utils.sh"
. /tmp/eviltheme.prop

# Welcome
ui_print ""
ui_print "Uninstalling $themeId"
ui_print "-----------------------"

# Mount
ui_print "Mounting filesystems"
mount -o ro /system
mount /vendor
mount /cache
mount /data
mount /preload

# Custom pre-uninstallation script
SYSROOT="$ROOT/system"
if [ -f "/tmp/pre-uninstall.sh" ]; then
    ui_print "Running pre-uninstallation script"
    chmod 0755 "/tmp/pre-uninstall.sh" && /tmp/pre-uninstall.sh "$OUTFD" "$SYSROOT"
fi

# Detect Magisk
suimg=$(ls /data/magisk.img || ls /cache/magisk.img) 2>/dev/null
MAGISKBIN="$(echo $suimg | sed 's~.img~~g')"
[ -d "$MAGISKBIN" -a -f "$MAGISKBIN/magisk" -a -f "$MAGISKBIN/util_functions.sh" ] && oldMagisk=0 || oldMagisk=1

# Adapted from Magisk's util_functions.sh
if [ "$oldMagisk" -eq "0" ]; then
    # TWRP bug fix
    mount -o bind /dev/urandom /dev/random
    # Temporarily block out all custom recovery binaries/libs
    mv /sbin /sbin_tmp
    # Add all possible library paths
    OLD_LD_PATH=$LD_LIBRARY_PATH
    $IS64BIT && export LD_LIBRARY_PATH=/system/lib64:/system/vendor/lib64 || export LD_LIBRARY_PATH=/system/lib:/system/vendor/lib
fi

# Remove theme files from /system
if [ "$suimg" ]; then
    sumnt="/$(basename $suimg .img)"
    target="$sumnt/$themeId"

    # Mount image
    ui_print "Mounting magisk.img"
    test ! -e $sumnt && mkdir $sumnt
    mount -t ext4 -o rw,noatime $suimg $sumnt
    for i in 0 1 2 3 4 5 6 7; do
        case `mount` in
            *" $sumnt "*) break;;
        esac;
        loop=/dev/block/loop$i
        if [ ! -f "$loop" -o ! -b "$loop" ]; then
            mknod $loop b 7 $i
        fi
        losetup $loop $suimg && mount -t ext4 -o loop $loop $sumnt
    done

    # Does it actually exist?
    if [ -d "$target" ]; then
        # Delete module folder
        ui_print "Deleting Magisk module $themeId"
        rm -fr "$target" && sync

        # Calculate new size
        curBlocks=$(e2fsck -n $suimg 2>/dev/null | grep $suimg | cut -d, -f3 | cut -d\  -f2)
        curUsed=$(echo "$curBlocks" | cut -d/ -f1)
        curUsedM=$((curUsed * 4 / 1024))
        newSizeM=$((curUsedM / 32 * 32 + 64))

        # Resize
        ui_print "Trying to shrink $suimg"
        if [ "$oldMagisk" -eq "0" ]; then
            $MAGISKBIN/magisk --umountimg $sumnt $loop
            rmdir $sumnt
            $MAGISKBIN/magisk --resizeimg $suimg $newSizeM
        else
            umount -l $sumnt
            rmdir $sumnt
            resize2fs $suimg ${newSizeM}M
        fi
    else
        # Remove theme files from /system
        ui_print "$target not found"
        mount -o rw,remount /system
        mount /system

        if [ -f "/tmp/delete.list" ]; then
            ui_print "Cleaning /system instead"
            while IFS='' read item; do
                ui_print " => $item"
                filePath="$(dirname $item)"
                fileRoot="$(echo $filePath | cut -f2 -d/)"
                [ "$fileRoot" == "system" ] && rm -fr "$ROOT/$item" || rm -fr $item
            done < /tmp/delete.list
        fi

        # Restore files
        ui_print "Restoring deleted files"
        unzip -o "$ZIPFILE" 'system/*' -d "$ROOT/"
        [ -d "/preload" ] && unzip -o "$ZIPFILE" 'preload/*' -d "/"
        [ -d "/vendor" ] && unzip -o "$ZIPFILE" 'vendor/*' -d "/"
    fi
else
    mount -o rw,remount /system
    mount /system

    # Remove theme files
    if [ -f "/tmp/delete.list" ]; then
        ui_print "Deleting theme files"
        while IFS='' read item; do
            ui_print " => $item"
            filePath="$(dirname $item)"
            fileRoot="$(echo $filePath | cut -f2 -d/)"
            [ "$fileRoot" == "system" ] && rm -fr "$ROOT/$item" || rm -fr $item
        done < /tmp/delete.list
    fi

    # Restore files
    ui_print "Restoring deleted files"
    unzip -o "$ZIPFILE" 'system/*' -d "$ROOT/"
    [ -d "/preload" ] && unzip -o "$ZIPFILE" 'preload/*' -d "/"
    [ -d "/vendor" ] && unzip -o "$ZIPFILE" 'vendor/*' -d "/"
fi

# Custom post-uninstallation script
if [ -f "/tmp/post-uninstall.sh" ]; then
    ui_print "Running post-uninstallation script"
    chmod 0755 "/tmp/post-uninstall.sh" && /tmp/post-uninstall.sh "$OUTFD" "$SYSROOT"
fi

# Wipe Dalvik
if [ -f "/tmp/bytecode.list" ]; then
    ui_print "Deleting necessary bytecode"
    while IFS='' read item; do
        ui_print " => $item"
        rm -f "/data/dalvik-cache/arm/$item@classes.dex"
        rm -f "/data/dalvik-cache/arm64/$item@classes.dex"
        rm -f "/cache/dalvik-cache/arm/$item@classes.dex"
        rm -f "/cache/dalvik-cache/arm64/$item@classes.dex"
        rm -f "/data/dalvik-cache/arm/$item@classes.art"
        rm -f "/data/dalvik-cache/arm64/$item@classes.art"
        rm -f "/cache/dalvik-cache/arm/$item@classes.art"
        rm -f "/cache/dalvik-cache/arm64/$item@classes.art"
    done < /tmp/bytecode.list
fi

# Adapted from Magisk's util_functions.sh
if [ "$oldMagisk" -eq "0" ]; then
    mv /sbin_tmp /sbin
    # Clear LD_LIBRARY_PATH
    export LD_LIBRARY_PATH=$OLD_LD_PATH
    umount -l /dev/random
fi

# Finish
ui_print "Unmounting filesystems"
umount -l /system
umount -l /vendor
umount /cache
umount /data
umount /preload

# Done
ui_print "Done."
exit 0
